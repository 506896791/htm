var CACHE = {};
var TEMPLATE = document.createElement('template');
var reg = /(\$_h\[\d+\])/g;
function html(statics) {
    var tpl = CACHE[statics] || (CACHE[statics] = build(statics));
    return tpl(this, arguments);
}

function build(statics) {
    var str = statics[0], i = 1;
    while (i < statics.length) {
        str += '$_h[' + i + ']' + statics[i++];
    }
    TEMPLATE.innerHTML = str.replace(/<(?:(\/)\/|(\/?)(\$_h\[\d+\]))/g, '<$1$2c c@=$3').replace(/<([\w:-]+)(\s[^<>]*?)?\/>/gi, '<$1$2></$1>').trim();
    return Function('h', '$_h', 'return ' + walk((TEMPLATE.content || TEMPLATE).firstChild));
}

function walk(n) {
    if (n.nodeType !== 1) {
        if (n.nodeType === 3 && n.data) 
            { return field(n.data, ','); }
        return 'null';
    }
    var nodeName = "\"" + (n.localName) + "\"", str = '{', sub = '', end = '}';
    for (var i = 0;i < n.attributes.length; i++) {
        var ref = n.attributes[i];
        var name = ref.name;
        var value = ref.value;
        if (name == 'c@') {
            nodeName = value;
            continue;
        }
        if (name.substring(0, 3) === '...') {
            end = '})';
            str = 'Object.assign(' + str + '},' + name.substring(3) + ',{';
            sub = '';
            continue;
        }
        str += sub + "\"" + (name.replace(/:(\w)/g, upper)) + "\":" + (value ? field(value, '+') : true);
        sub = ',';
    }
    str = 'h(' + nodeName + ',' + str + end;
    var child = n.firstChild;
    while (child) {
        str += ',' + walk(child);
        child = child.nextSibling;
    }
    return str + ')';
}

function upper(s, i) {
    return i.toUpperCase();
}

function field(value, sep) {
    var matches = value.match(reg);
    var strValue = JSON.stringify(value);
    if (matches != null) {
        if (matches[0] === value) 
            { return value; }
        strValue = strValue.replace(reg, ("\"" + sep + "$1" + sep + "\"")).replace(/"[+,]"/g, '');
        if (sep === ',') 
            { strValue = "[" + strValue + "]"; }
    }
    return strValue;
}



//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUEsQ0FBSztRQUNsQixLQUFBLENBQUEsQ0FBQSxDQUFRLEtBQUEsQ0FBTTtJQUNoQjtJQUNDLE9BQU8sR0FBQSxDQUFBLENBQUEsQ0FBTTtBQUNkOztBQUVBLFNBQVMsTUFBTyxDQUFHLEVBQUEsR0FBRztJQUNyQixPQUFPLENBQUEsQ0FBRSxXQUFGO0FBQ1I7O0FBR0EsU0FBUyxNQUFNLEtBQU8sRUFBQSxLQUFLO0lBQzFCLEtBQUEsQ0FBTSxVQUFVLEtBQUEsQ0FBTSxLQUFOLENBQVk7SUFDNUIsR0FBQSxDQUFJLFdBQVcsSUFBQSxDQUFLLFNBQUwsQ0FBZTtJQUM5QixJQUFJLE9BQUEsQ0FBQSxFQUFBLENBQVcsTUFBTTtRQUNwQixJQUFJLE9BQUEsQ0FBUSxFQUFSLENBQUEsR0FBQSxDQUFlO1lBQU8sT0FBTztRQUNqQyxRQUFBLENBQUEsQ0FBQSxDQUFXLFFBQUEsQ0FBUyxPQUFULENBQWlCLEtBQUssSUFBSSxRQUFRLEtBQVosRUFBdEIsQ0FBMEMsT0FBMUMsQ0FBa0QsV0FBVztRQUN4RSxJQUFJLEdBQUEsQ0FBQSxHQUFBLENBQVE7WUFBSyxRQUFBLENBQUEsQ0FBQSxDQUFXLElBQUksVUFBSjtJQUM5QjtJQUNDLE9BQU87QUFDUjs7QUFwRkEiLCJmaWxlIjoiaW5kZXgubWpzKG9yaWdpbmFsKSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuY29uc3QgQ0FDSEUgPSB7fTtcblxuY29uc3QgVEVNUExBVEUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuXG5jb25zdCByZWcgPSAvKFxcJF9oXFxbXFxkK1xcXSkvZztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHRtbChzdGF0aWNzKSB7XG5cdGNvbnN0IHRwbCA9IENBQ0hFW3N0YXRpY3NdIHx8IChDQUNIRVtzdGF0aWNzXSA9IGJ1aWxkKHN0YXRpY3MpKTtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1yZXN0LXBhcmFtc1xuXHRyZXR1cm4gdHBsKHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbi8qKiBDcmVhdGUgYSB0ZW1wbGF0ZSBmdW5jdGlvbiBnaXZlbiBzdHJpbmdzIGZyb20gYSB0YWdnZWQgdGVtcGxhdGUuICovXG5mdW5jdGlvbiBidWlsZChzdGF0aWNzKSB7XG5cdGxldCBzdHIgPSBzdGF0aWNzWzBdLCBpID0gMTtcblx0d2hpbGUgKGkgPCBzdGF0aWNzLmxlbmd0aCkge1xuXHRcdHN0ciArPSAnJF9oWycgKyBpICsgJ10nICsgc3RhdGljc1tpKytdO1xuXHR9XG5cdC8vIFRlbXBsYXRlIHN0cmluZyBwcmVwcm9jZXNzaW5nOlxuXHQvLyAtIHJlcGxhY2UgPCR7Rm9vfT4gd2l0aCA8YyBjQD0ke0Zvb30+XG5cdC8vIC0gcmVwbGFjZSA8eCAvPiB3aXRoIDx4PjwveD5cblx0Ly8gLSByZXBsYWNlIDwke0Zvb30+YTwvLz5iIHdpdGggPGMgY0A9JHtGb299PmE8L2M+YlxuXHRURU1QTEFURS5pbm5lckhUTUwgPSBzdHIucmVwbGFjZSgvPCg/OihcXC8pXFwvfChcXC8/KShcXCRfaFxcW1xcZCtcXF0pKS9nLCAnPCQxJDJjIGNAPSQzJykucmVwbGFjZSgvPChbXFx3Oi1dKykoXFxzW148Pl0qPyk/XFwvPi9naSwgJzwkMSQyPjwvJDE+JykudHJpbSgpO1xuXHRyZXR1cm4gRnVuY3Rpb24oJ2gnLCAnJF9oJywgJ3JldHVybiAnICsgd2FsaygoVEVNUExBVEUuY29udGVudCB8fCBURU1QTEFURSkuZmlyc3RDaGlsZCkpO1xufVxuXG4vKiogVHJhdmVyc2UgYSBET00gdHJlZSBhbmQgc2VyaWFsaXplIGl0IHRvIGh5cGVyc2NyaXB0IGZ1bmN0aW9uIGNhbGxzICovXG5mdW5jdGlvbiB3YWxrKG4pIHtcblx0aWYgKG4ubm9kZVR5cGUgIT09IDEpIHtcblx0XHRpZiAobi5ub2RlVHlwZSA9PT0gMyAmJiBuLmRhdGEpIHJldHVybiBmaWVsZChuLmRhdGEsICcsJyk7XG5cdFx0cmV0dXJuICdudWxsJztcblx0fVxuXHRsZXQgbm9kZU5hbWUgPSBgXCIke24ubG9jYWxOYW1lfVwiYCwgc3RyID0gJ3snLCBzdWI9JycsIGVuZD0nfSc7XG5cdGZvciAobGV0IGk9MDsgaTxuLmF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCB7IG5hbWUsIHZhbHVlIH0gPSBuLmF0dHJpYnV0ZXNbaV07XG5cdFx0aWYgKG5hbWU9PSdjQCcpIHtcblx0XHRcdG5vZGVOYW1lID0gdmFsdWU7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0aWYgKG5hbWUuc3Vic3RyaW5nKDAsMyk9PT0nLi4uJykge1xuXHRcdFx0ZW5kID0gJ30pJztcblx0XHRcdHN0ciA9ICdPYmplY3QuYXNzaWduKCcgKyBzdHIgKyAnfSwnICsgbmFtZS5zdWJzdHJpbmcoMykgKyAnLHsnO1xuXHRcdFx0c3ViID0gJyc7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cdFx0c3RyICs9IGAke3N1Yn1cIiR7bmFtZS5yZXBsYWNlKC86KFxcdykvZywgdXBwZXIpfVwiOiR7dmFsdWUgPyBmaWVsZCh2YWx1ZSwgJysnKSA6IHRydWV9YDtcblx0XHRzdWIgPSAnLCc7XG5cdH1cblx0c3RyID0gJ2goJyArIG5vZGVOYW1lICsgJywnICsgc3RyICsgZW5kO1xuXHRsZXQgY2hpbGQgPSBuLmZpcnN0Q2hpbGQ7XG5cdHdoaWxlIChjaGlsZCkge1xuXHRcdHN0ciArPSAnLCcgKyB3YWxrKGNoaWxkKTtcblx0XHRjaGlsZCA9IGNoaWxkLm5leHRTaWJsaW5nO1xuXHR9XG5cdHJldHVybiBzdHIgKyAnKSc7XG59XG5cbmZ1bmN0aW9uIHVwcGVyIChzLCBpKSB7XG5cdHJldHVybiBpLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8qKiBTZXJpYWxpemUgYSBmaWVsZCB0byBhIFN0cmluZyBvciByZWZlcmVuY2UgZm9yIHVzZSBpbiBnZW5lcmF0ZWQgY29kZS4gKi9cbmZ1bmN0aW9uIGZpZWxkKHZhbHVlLCBzZXApIHtcblx0Y29uc3QgbWF0Y2hlcyA9IHZhbHVlLm1hdGNoKHJlZyk7XG5cdGxldCBzdHJWYWx1ZSA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcblx0aWYgKG1hdGNoZXMgIT0gbnVsbCkge1xuXHRcdGlmIChtYXRjaGVzWzBdID09PSB2YWx1ZSkgcmV0dXJuIHZhbHVlO1xuXHRcdHN0clZhbHVlID0gc3RyVmFsdWUucmVwbGFjZShyZWcsIGBcIiR7c2VwfSQxJHtzZXB9XCJgKS5yZXBsYWNlKC9cIlsrLF1cIi9nLCAnJyk7XG5cdFx0aWYgKHNlcCA9PT0gJywnKSBzdHJWYWx1ZSA9IGBbJHtzdHJWYWx1ZX1dYDtcblx0fVxuXHRyZXR1cm4gc3RyVmFsdWU7XG59XG4iXX0=

var currentExpressions;
function htmBabelPlugin(ref, options) {
    var t = ref.types;
    if ( options === void 0 ) options = {};

    var pragma = options.pragma === false ? false : dottedIdentifier(options.pragma || 'h');
    var inlineVNodes = options.monomorphic || pragma === false;
    function dottedIdentifier(keypath) {
        var path = keypath.split('.');
        var out;
        for (var i = 0;i < path.length; i++) {
            var ident = propertyName(path[i]);
            out = i === 0 ? ident : t.memberExpression(out, ident);
        }
        return out;
    }
    
    function patternStringToRegExp(str) {
        var parts = str.split('/').slice(1);
        var end = parts.pop() || '';
        return new RegExp(parts.join('/'), end);
    }
    
    function propertyName(key) {
        if (key.match(/(^\d|[^a-z0-9_$])/i)) 
            { return t.stringLiteral(key); }
        return t.identifier(key);
    }
    
    function stringValue(str) {
        if (options.monomorphic) {
            return t.objectExpression([t.objectProperty(propertyName('type'), t.numericLiteral(3)),
                t.objectProperty(propertyName('tag'), t.nullLiteral()),t.objectProperty(propertyName('props'), t.nullLiteral()),
                t.objectProperty(propertyName('children'), t.nullLiteral()),t.objectProperty(propertyName('text'), t.stringLiteral(str))]);
        }
        return t.stringLiteral(str);
    }
    
    function createVNode(tag, props, children) {
        if (inlineVNodes) {
            return t.objectExpression([options.monomorphic && t.objectProperty(propertyName('type'), t.numericLiteral(1)),
                t.objectProperty(propertyName('tag'), tag),t.objectProperty(propertyName('props'), props),
                t.objectProperty(propertyName('children'), children),options.monomorphic && t.objectProperty(propertyName('text'), t.nullLiteral())].filter(Boolean));
        }
        return t.callExpression(pragma, [tag,props,children]);
    }
    
    var isVNode = t.isCallExpression;
    if (inlineVNodes) {
        isVNode = (function (node) {
            if (!t.isObjectExpression(node)) 
                { return false; }
            return node.properties[0].value.value !== 3;
        });
    }
    function mapChildren(child, index, children) {
        if (typeof child === 'string' && child.trim().length === 0 || child == null) {
            if (index === 0 || index === children.length - 1) 
                { return null; }
        }
        if (typeof child === 'string' && isVNode(children[index - 1]) && isVNode(children[index + 1])) {
            child = child.trim();
        }
        if (typeof child === 'string') {
            return stringValue(child);
        }
        return child;
    }
    
    function h(tag, props) {
        var children = [], len = arguments.length - 2;
        while ( len-- > 0 ) children[ len ] = arguments[ len + 2 ];

        if (typeof tag === 'string') {
            var matches = tag.match(/\$\$\$_h_\[(\d+)\]/);
            if (matches) 
                { tag = currentExpressions[matches[1]]; }
             else 
                { tag = t.stringLiteral(tag); }
        }
        var propsNode = t.objectExpression(Object.keys(props).map(function (key) {
            var value = props[key];
            if (typeof value === 'string') {
                var tokenizer = /\$\$\$_h_\[(\d+)\]/g;
                var token, lhs, root, index = 0, lastIndex = 0;
                var append = function (expr) {
                    if (lhs) 
                        { expr = t.binaryExpression('+', lhs, expr); }
                    root = (lhs = expr);
                };
                while (token = tokenizer.exec(value)) {
                    append(t.stringLiteral(value.substring(index, token.index)));
                    append(currentExpressions[token[1]]);
                    index = token.index;
                    lastIndex = tokenizer.lastIndex;
                }
                if (lastIndex < value.length) {
                    append(t.stringLiteral(value.substring(lastIndex)));
                }
                value = root;
            } else if (typeof value === 'boolean') {
                value = t.booleanLiteral(value);
            }
            return t.objectProperty(propertyName(key), value);
        }));
        if (Array.isArray(children)) {
            children = t.arrayExpression(children.map(mapChildren).filter(Boolean));
        }
        return createVNode(tag, propsNode, children);
    }
    
    var html$$1 = html.bind(h);
    var htmlName = options.tag || 'html';
    return {
        name: 'htm',
        visitor: {
            TaggedTemplateExpression: function TaggedTemplateExpression(path) {
                var tag = path.node.tag.name;
                if (htmlName[0] === '/' ? patternStringToRegExp(htmlName).test(tag) : tag === htmlName) {
                    var statics = path.node.quasi.quasis.map(function (e) { return e.value.raw; });
                    var expr = path.node.quasi.expressions;
                    currentExpressions = expr;
                    path.replaceWith(html$$1.apply(void 0, [ statics ].concat( expr.map(function (p, i) { return ("$$$_h_[" + i + "]"); }) )));
                }
            }
        }
    };
}



//# sourceMappingURL=data:application/json;charset=utf-8;base64,

export default htmBabelPlugin;
